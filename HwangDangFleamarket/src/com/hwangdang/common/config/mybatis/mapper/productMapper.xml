<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="productMapper">
	<sql id="product-columns">
		product_Id, product_name, product_price, product_stock, product_main_image, product_info, product_like, seller_store_no
	</sql>
	<sql id="select-basic">
		SELECT <include refid="product-columns"/> FROM product 
	</sql>

	<!-- 상품 resultMap -->
	<resultMap type="product" id="product-basic-resultMap">
		<id column="product_Id" property="productId"/>
		<result column="product_name" property="productName"/>
		<result column="product_price" property="productPrice"/>
		<result column="product_stock" property="productStock"/>
		<result column="product_main_image" property="productMainImage"/>
		<result column="product_info" property="productInfo"/>
		<result column="product_like" property="productLike"/>
		<result column="seller_store_no" property="sellerStoreNo"/>
	</resultMap>
	
	<!-- 상품 옵션 resultMap -->
	<resultMap type="productOption" id="productOption-basic-resultMap">
		<id column="option_id" property="optionId"/>
		<result column="option_name" property="optionName"/>
		<result column="option_sub_name" property="optionSubName"/>
		<result column="option_stock" property="optionStock"/>
		<result column="option_add_price" property="optionAddPrice"/>
		<result column="product_id" property="productId"/>
	</resultMap>
	
	<!-- 리뷰 resultMap -->
	<resultMap type="review" id="review-basic-resultMap">
		<id column="review_no" property="reviewNo"/>
		<result column="review_content" property="reviewContent"/>
		<result column="review_date" property="reviewDate"/>
		<result column="review_writer" property="reviewWriter"/>
		<result column="product_id" property="productId"/>
	</resultMap>
	
	<!-- 스토어 QnA resultMap -->
	<resultMap type="storeQnA" id="QnA-basic-resultMap">
		<id column="storeQnA_no" property="storeQnANo"/>
		<result column="storeQnA_title" property="storeQnATitle"/>
		<result column="storeQnA_content" property="storeQnAContent"/>
		<result column="storeQnA_hit" property="storeQnAHit"/>
		<result column="storeQnA_published" property="storeQnAPublished"/>
		<result column="storeQnA_writer" property="storeQnAWriter"/>
		<result column="storeQnA_date" property="storeQnADate"/>
		<result column="product_id" property="productId"/>
	</resultMap>
	
	<!-- 스토어 QnA reply -->
	<resultMap type="storeQnAReply" id="reply-basic-resultMap">
		<result column="store_reply_writer" property="storeReplyWriter"/>
		<result column="store_reply_content" property="storeReplyContent"/>
		<result column="store_reply_date" property="storeReplyDate"/>
		<result column="storeQnA_no" property="storeQnANo"/>
	</resultMap>
	
	<!-- 스토어 QnA Join -->
	<resultMap type="storeQnA" id="QnA-join" extends="QnA-basic-resultMap">
		<association property="storeQnAReply" javaType="StoreQnAReply" resultMap="reply-basic-resultMap"/>
	</resultMap>
	
	<!-- 카테고리 resultMap -->
	<resultMap type="category" id="category-basic-resultMap">
		<id column="category_id" property="categoryId"/>
		<result column="category_name" property="categoryName"/>
		<result column="category_id_ref" property="categoryIdRef"/>
		<result column="category_type" property="categoryType"/>
	</resultMap>
	
	<!-- 상품 상세 이미지 resultMap -->
	<resultMap type="productDetailImage" id="detailImage-basic-resultMap">
		<result column="image_path" property="imagePath"/>
		<result column="product_id" property="productId"/>
	</resultMap>
	
	<!-- seller/productOption/productDetailImage join -->
	<resultMap type="product" id="product-seller-productImage-join" extends="product-basic-resultMap">
		<association property="seller" javaType="seller" resultMap="sellerMapper.seller-basic-resultmap"/>
		<association property="productOption" javaType="productOption" resultMap="productOption-basic-resultMap"/>
		<association property="productDetailImage" javaType="productDetailImage" resultMap="detailImage-basic-resultMap"/>
	</resultMap>
	
	<resultMap type="productOption" id="productOptionList" extends="productOption-basic-resultMap">
		<collection property="optionList" ofType="ProductOption" resultMap="productOption-basic-resultMap"/>
	</resultMap>
	
	<!-- 상품 전체 조회. (추천 순, Paging, sellerStoreNo로 조회.)-->
	<select id="selectAll" resultMap="product-basic-resultMap" parameterType="map">
		select <include refid="product-columns"/> 
		from (select ceil(rownum/#{itemPerPage}) page, <include refid="product-columns"/>
				from (select <include refid="product-columns"/> 
						from product where seller_store_no=#{sellerStoreNo} order by product_like desc))
		where page = #{page}
	</select>
	
	<!-- 상품 전체 갯수 조회. -->
	<select id="selectCount" resultType="_int">
		select count(product_id) from product
	</select>
	
	<!-- sellerStoreNo로 등록된 상품 갯수 조회. -->
	<select id="selectCountByNo" resultType="_int" parameterType="_int">
		select count(product_id) from product where seller_store_no=#{sellerStoreNo}
	</select>
	
	<!-- 상품 id로 상품 조회. -->
	<select id="selectProductById" resultMap="product-basic-resultMap" parameterType="string">
		select <include refid="product-columns"/> from product where product_id=#{productId}
	</select>
	
	<!-- 상품ID로 상품옵션 조회. -->
	<select id="selectOptionById" resultMap="productOption-basic-resultMap" parameterType="string">
		select option_id, option_name, option_sub_name, option_stock, option_add_price, product_id
		from product_option
		where product_id = #{productId}
		order by option_sub_name asc
	</select>
	
	<!-- 옵션이름으로 재고량, 추가가격 조회. -->
	<select id="selectOptionStockByName" resultMap="productOption-basic-resultMap" parameterType="string">
		select option_id, option_name, option_sub_name, option_stock, option_add_price, product_id
		from product_option
		where option_sub_name = #{optionName}
		and	 product_id = #{productId}
	</select>
	
	<!-- 상품 ID로 상세이미지 조회. -->
	<select id="selectDetailImageById" resultType="string" parameterType="string">
		select image_path from product_detail_image where product_id = #{productId}
	</select>
	
	<!-- productId로 등록된 리뷰 갯수 조회. -->
	<select id="selectCountById" resultType="_int" parameterType="string">
		select count(review_no) from review where product_id=#{productId}
	</select>
	
	<!-- 상품 ID로 Review 조회. ( + Paging............)-->
	<select id="selectReviewById" resultMap="review-basic-resultMap" parameterType="map">
		select review_no, review_content, review_date, review_writer, product_id
		from (select ceil(rownum/#{itemPerPage}) page, review_no, review_content, review_date, review_writer, product_id
				from (select review_no, review_content, review_date, review_writer, product_id
						from review where product_id=#{productId} order by review_no desc))
		where page = #{page}
	</select>
	
	<!-- (리뷰, 상품QnA 등록시 구매한 회원인지 확인) -->
	<!-- 회원 id로 주문내역 검색.(주문번호) -->
	<select id="selectOrderNo" resultType="string" parameterType="string">
		select orders_no from orders
		where member_id = #{memberId}
		and payment_status = 1
	</select>
	<!-- 주문번호로 주문상품 여부확인(상품id 비교.) -->
	<select id="selectOrderProduct" resultType="_int" parameterType="map">
		select count(orders_no)
		from order_product
		where orders_no=#{ordersNo}
		and	product_id=#{productId}
	</select>
	
	<!-- 리뷰 등록하기. -->
	<insert id="insertReview" parameterType="review">
		<selectKey keyProperty="reviewNo" resultType="_int" order="BEFORE">
			select review_no_seq.nextval from dual
		</selectKey>
		insert into review values (#{reviewNo}, #{reviewContent}, sysdate, #{reviewWriter}, #{productId})
	</insert>
	
	<!-- 리뷰 등록 전 이미 등록했는지 여부 확인.(product Id와 memberId로...) -->
	<select id="reviewRegisterCheck" parameterType="map" resultType="_int">
		select count(review_no) from review where review_writer = #{memberId} and product_id=#{productId}
	</select>
	
	<!-- 리뷰 등록시 추천기능(productId로 검색.) -->
	<update id="updateProductLikes" parameterType="map">
		update 	product
		set			product_like = product_like+#{productLike}
		where		product_id = #{productId}
	</update>
	
	<!-- 추천기능 적용후 추천수 조회 및 리턴. -->
	<select id="selectProductLike" parameterType="string" resultType="_int">
		select product_like from product where product_id=#{productId}
	</select>
	
	<!-- 리뷰 삭제.(멤버아이디와 상품아이디로) -->
	<delete id="deleteReview" parameterType="map">
		delete from review where review_Writer = #{memberId} and product_id=#{productId}
	</delete>
	
	<!-- 상품 QnA 목록 조회( 상품 ID로... ) Paging -->
	<select id="selectQnAById" resultMap="QnA-basic-resultMap" parameterType="map">
		select storeQnA_no, storeQnA_title, storeQnA_content, storeQnA_hit, storeQnA_published, storeQnA_writer, storeQnA_date, product_id
		from (select ceil(rownum/#{itemPerPage}) page, storeQnA_no, storeQnA_title, storeQnA_content, storeQnA_hit, storeQnA_published, storeQnA_writer, storeQnA_date, product_id
				from (select storeQnA_no, storeQnA_title, storeQnA_content, storeQnA_hit, storeQnA_published, storeQnA_writer, storeQnA_date, product_id
						from store_QnA where product_id=#{productId} order by storeQnA_no desc))
		where page = #{page}
	</select>
	
	<!-- productId로 등록된 스토어QnA 갯수 조회. -->
	<select id="selectQnACountById" resultType="_int" parameterType="string">
		select count(storeQnA_no) from store_QnA where product_id=#{productId}
	</select>
	
	<!-- QnA번호로 QnA조회. -->
	<select id="selectQnAByNo" resultMap="QnA-basic-resultMap" parameterType="_int">
		select 	storeQnA_no, storeQnA_title, storeQnA_content, storeQnA_hit, storeQnA_published, storeQnA_writer, storeQnA_date, product_id
		from		store_QnA
		where 	storeQnA_no=#{storeQnANo} 
	</select>
	
	<!-- QnA조인 -->
	<select id="selectQnAJoin" resultMap="QnA-join" parameterType="_int">
		select 	q.storeQnA_no, q.storeQnA_title, q.storeQnA_content, q.storeQnA_hit, q.storeQnA_published, q.storeQnA_writer, q.storeQnA_date, q.product_id,
					r.store_reply_writer, r.store_reply_content, r.store_reply_date, r.storeQnA_no
		from 		store_QnA q, store_QnA_reply r
		where 	q.storeQnA_no = #{1}
		and		r.storeQnA_no = q.storeQnA_no
	</select>
	
	<!-- QnA댓글 등록 (작성자(스토어번호로 판매자 조회.), 내용, 스토어QnA번호.)-->
	<insert id="insertQnAReply" parameterType="map">
		insert into store_QnA_reply values (#{storeReplyWriter}, #{storeReplyContent}, sysdate, #{storeQnANo})
	</insert>
	
	<!-- 스토어 번호로 판매자 조회. -->
	<select id="selectSellerByNo" parameterType="_int" resultType="string">
		select member_id from seller where seller_store_no=#{sellerStoreNo}
	</select>
	
	<!-- 카테고리 대분류 조회. -->
	<select id="selectFirstCategory" resultMap="category-basic-resultMap">
		select category_id, category_name, category_id_ref, category_type from category where category_type = 'first'
	</select>
	
	<!-- 카테고리 소분류 조회. -->
	<select id="selectSecondCategory" resultMap="category-basic-resultMap" parameterType="string">
		select category_id, category_name, category_id_ref, category_type from category where category_id_ref = #{categoryIdRef}
	</select>
	
	<select id="selectProductSellerJoin" resultMap="product-seller-productImage-join" parameterType="map">
		select p.product_Id, p.product_name, p.product_price, p.product_stock, p.product_main_image, p.product_info, p.product_like, p.seller_store_no, 
			   s.seller_store_no, s.seller_store_name, s.seller_tax_id, s.seller_industry, s.seller_sub_industry, s.seller_zipcode, s.seller_address, 
			   s.seller_sub_address, s.seller_store_image, s.seller_product1, s.seller_product2, s.seller_product3, s.seller_introduction, s.seller_assign, s.member_id,
			   i.image_path, i.product_id
		from   product p, seller s, product_detail_image i
		where  p.seller_store_no = #{sellerStoreNo}
		and	   p.product_id = #{productId}
		and    p.seller_store_no = s.seller_store_no
		and    p.product_id = i.product_id
	</select>
	
	<!-- 상품 등록 -->
	<insert id="insertProduct" parameterType="product">
		insert into product values (#{productId},#{productName},#{productPrice},#{productStock},#{productMainImage},#{productInfo},#{productLike},#{sellerStoreNo})
	</insert>
	
	<!-- 상품 옵션 등록 -->
	<insert id="insertOption" parameterType="productOption">
		<selectKey keyProperty="optionId" resultType="_int" order="BEFORE">
			select option_id_seq.nextval from dual
		</selectKey>
		insert into product_option values(#{optionId},#{optionName},#{optionSubName},#{optionStock},#{optionAddPrice},#{productId})
	</insert>
	
	<!-- 상품 상세 이미지 등록 -->
	<insert id="insertDetailImage" parameterType="productDetailImage">
		insert into product_detail_image values(#{imagePath},#{productId})
	</insert>
	
	<!-- 옵션 아이디로 옵션 수정 -->
	<update id="updateProductOptionById" parameterType="ProductOption">
		update product_option
		set	   option_stock = #{optionStock}, 
			   option_add_price = #{optionAddPrice}
		where  option_id = #{optionId}
	</update>
	
	<!-- 아이디로 상품 수정 -->
	<update id="updateProductById" parameterType="product">
		update	product
		set		product_name = #{productName},
				Product_price = #{productPrice},
				product_main_image = #{productMainImage},
				product_info = #{productInfo}
		where	product_id = #{productId}	
	</update>
	
	<update id="updateDetailImageById" parameterType="ProductDetailImage">
		update	product_detail_image
		set		image_path = #{imagePath}
		where	product_id = #{productId}
	</update>
	
	<delete id="deleteProductById" parameterType="string">
		delete from product where product_id = #{value}
	</delete>
</mapper>